package com.uwb.bt2j.indexer.types;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;

import com.uwb.bt2j.indexer.BitpairOutFileBuf;
import com.uwb.bt2j.indexer.FileBuf;
import com.uwb.bt2j.indexer.WordIO;

import javafx.util.Pair;

public class RefRecord {
	protected long off;
	protected long len;
	protected boolean first;
	
	public enum ReadDir {
		REF_READ_FORWARD, // don't reverse reference sequence
				REF_READ_REVERSE,     // reverse entire reference sequence
				REF_READ_REVERSE_EACH // reverse each unambiguous stretch of reference
	}
	
	public RefRecord() {}
	public RefRecord(long _off, long _len, boolean _first) {
		off = _off;
		len = _len;
		first = _first;
	}
	
	public RefRecord(File in, boolean swap) {
		if(!in.canRead()) {
			System.err.println("Error reading RefRecord offset from FILE");
		}
		if(!in.canRead()) {
			System.err.println("Error reading RefRecord offset from FILE");
		}
		first = in.canRead() ? true : false;
	}
	
	public void write(OutputStream out, boolean be) {
		WordIO.writeU<Long>(out, off, be);
		WordIO.writeU<Long>(out, len, be);
		out.write(first ? 1 : 0);
	}
	
	public RefRecord fastaRefReadSize(FileBuf in, RefReadInParams rparms, boolean first, BitpairOutFileBuf bpout) {
		
	}
	
	public Pair<Integer,Integer> fastaRefReadSizes(EList<FileBuf> in, EList<RefRecord> recs, RefReadInParams rparms, BitpairOutFileBuf bpout, long numSeqs) {
		
	}
	
	public void reverseRefRecords(EList<RefRecord> src, EList<RefRecord> dst, boolean recursive, boolean verbose) {
		
	}
	
	public static RefRecord fastaRefReadAppend(FileBuf in, boolean first, TStr dst, long dstoff, RefReadInParams rparms, String name) {
		
	}
}
