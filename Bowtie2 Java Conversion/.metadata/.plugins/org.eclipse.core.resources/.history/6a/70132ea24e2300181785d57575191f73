package com.uwb.bt2j.indexer;

public class LarssonSadakane{
	public int I, V[], r, h;
	
	public void update_group(int pl, int pm) {
		int g;
		   g=(int)(pm-I);                 /* group number.*/
		   V[pl]=g;                    /* update group number of first position.*/
		   if (pl==pm)
			  pl=-1;                   /* one element, sorted group.*/
		   else
			  do                        /* more than one element, unsorted group.*/
				 V[++pl]=g;            /* update group numbers.*/
			  while (pl<pm);
	}
	
	public void select_sort_split(int p, int n) {
		 int pa, pb, pi, pn;
		   int f, v, tmp;

		   pa=p;                        /* pa is start of group being picked out.*/
		   pn=p+n-1;                    /* pn is last position of subarray.*/
		   while (pa<pn) {
			  for (pi=pb=pa+1, f=LS_KEY(pa); pi<=pn; ++pi)
				 if ((v=LS_KEY(pi))<f) {
					f=v;                /* f is smallest key found.*/
					LS_SWAP(pi, pa);       /* place smallest element at beginning.*/
					pb=pa+1;            /* pb is position for elements equal to f.*/
				 } else if (v==f) {     /* if equal to smallest key.*/
					LS_SWAP(pi, pb);       /* place next to other smallest elements.*/
					++pb;
				 }
			  update_group(pa, pb-1);   /* update group values for new group.*/
			  pa=pb;                    /* continue sorting rest of the subarray.*/
		   }
		   if (pa==pn) {                /* check if last part is single element.*/
			  V[pa]=(int)(pa-I);
			  pa=-1;                   /* sorted group.*/
		   }
	}
	
	public int choose_pivot(int p, int n) {
		int pl, pm, pn;
		   int s;

		   pm=p+(n>>1);                 /* small arrays, middle element.*/
		   if (n>7) {
			  pl=p;
			  pn=p+n-1;
			  if (n>40) {               /* big arrays, pseudomedian of 9.*/
				 s=n>>3;
				 pl=LS_SMED3(pl, pl+s, pl+s+s);
				 pm=LS_SMED3(pm-s, pm, pm+s);
				 pn=LS_SMED3(pn-s-s, pn-s, pn);
			  }
			  pm=LS_SMED3(pl, pm, pn);      /* midsize arrays, median of 3.*/
		   }
		   return LS_KEY(pm);
	}
	
	public void sort_split(int p, int n) {
		int pa, pb, pc, pd, pl, pm, pn;
		   int f, v, s, t, tmp;

		   if (n<7) {                   /* multi-selection sort smallest arrays.*/
			  select_sort_split(p, n);
			  return;
		   }

		   v=choose_pivot(p, n);
		   pa=pb=p;
		   pc=pd=p+n-1;
		   while (true) {                  /* split-end partition.*/
			  while (pb<=pc && (f=LS_KEY(pb))<=v) {
				 if (f==v) {
					LS_SWAP(pa, pb);
					++pa;
				 }
				 ++pb;
			  }
			  while (pc>=pb && (f=LS_KEY(pc))>=v) {
				 if (f==v) {
					LS_SWAP(pc, pd);
					--pd;
				 }
				 --pc;
			  }
			  if (pb>pc)
				 break;
			  LS_SWAP(pb, pc);
			  ++pb;
			  --pc;
		   }
		   pn=p+n;
		   if ((s=(int)(pa-p))>(t=(int)(pb-pa)))
			  s=t;
		   for (pl=p, pm=pb-s; s; --s, ++pl, ++pm)
			  LS_SWAP(pl, pm);
		   if ((s=(int)(pd-pc))>(t=(int)(pn-pd-1)))
			  s=t;
		   for (pl=pb, pm=pn-s; s; --s, ++pl, ++pm)
			  LS_SWAP(pl, pm);

		   s=(int)(pb-pa);
		   t=(int)(pd-pc);
		   if (s>0)
			  sort_split(p, s);
		   update_group(p+s, p+n-t-1);
		   if (t>0)
			  sort_split(p+n-t, t);
	}
	
	public void bucketsort(int[] x, int p, int n, int k) {
		int pi, i, c, d, g;

		   for (pi=p; pi<p+k; ++pi)
			  pi=-1;                   /* mark linked lists empty.*/
		   for (i=0; i<=n; ++i) {
			  x[i]=p[c=x[i]];           /* insert in linked list.*/
			  p[c]=i;
		   }
		   for (pi=p+k-1, i=n; pi>=p; --pi) {
			  d=x[c=pi];               /* c is position, d is next in list.*/
			  x[c]=g=i;                 /* last position equals group number.*/
			  if (d == 0 || d > 0) {    /* if more than one element in group.*/
				 p[i--]=c;              /* p is permutation for the sorted x.*/
				 do {
					d=x[c=d];           /* next in linked list.*/
					x[c]=g;             /* group number in x.*/
					p[i--]=c;           /* permutation in p.*/
				 } while (d == 0 || d > 0);
			  } else
				 p[i--]=-1;             /* one element, sorted group.*/
		   }
	}
	
	public int transform(int x, int p, int n, int k, int l, int q) {
		int b, c, d, e, i, j, m, s;
		   int pi, pj;

		   for (s=0, i=k-l; i; i>>=1)
			  ++s;                      /* s is number of bits in old symbol.*/
		   e=Integer.MAX_VALUE>>s; /* e is for overflow checking.*/
		   for (b=d=r=0; r<n && d<=e && (c=d<<s|(k-l))<=q; ++r) {
			  b=b<<s|(x[r]-l+1);        /* b is start of x in chunk alphabet.*/
			  d=c;                      /* d is max symbol in chunk alphabet.*/
		   }
		   m=(((int)1)<<(r-1)*s)-1;            /* m masks off top old symbol from chunk.*/
		   x[n]=l-1;                    /* emulate zero terminator.*/
		   if (d<=n) {                  /* if bucketing possible, compact alphabet.*/
			  for (pi=p; pi<=p+d; ++pi)
				 *pi=0;                 /* zero transformation table.*/
			  for (pi=x+r, c=b; pi<=x+n; ++pi) {
				 p[c]=1;                /* mark used chunk symbol.*/
				 c=(c&m)<<s|(*pi-l+1);  /* shift in next old symbol in chunk.*/
			  }
			  for (i=1; i<r; ++i) {     /* handle last r-1 positions.*/
				 p[c]=1;                /* mark used chunk symbol.*/
				 c=(c&m)<<s;            /* shift in next old symbol in chunk.*/
			  }
			  for (pi=p, j=1; pi<=p+d; ++pi)
				 if (*pi)
					*pi=j++;            /* j is new alphabet size.*/
			  for (pi=x, pj=x+r, c=b; pj<=x+n; ++pi, ++pj) {
				 *pi=p[c];              /* transform to new alphabet.*/
				 c=(c&m)<<s|(*pj-l+1);  /* shift in next old symbol in chunk.*/
			  }
			  while (pi<x+n) {          /* handle last r-1 positions.*/
				 *pi++=p[c];            /* transform to new alphabet.*/
				 c=(c&m)<<s;            /* shift right-end zero in chunk.*/
			  }
		   } else {                     /* bucketing not possible, don't compact.*/
			  for (pi=x, pj=x+r, c=b; pj<=x+n; ++pi, ++pj) {
				 pi=c;                 /* transform to new alphabet.*/
				 c=(c&m)<<s|(*pj-l+1);  /* shift in next old symbol in chunk.*/
			  }
			  while (pi<x+n) {          /* handle last r-1 positions.*/
				 *pi++=c;               /* transform to new alphabet.*/
				 c=(c&m)<<s;            /* shift right-end zero in chunk.*/
			  }
			  j=d+1;                    /* new alphabet size.*/
		   }
		   x[n]=0;                      /* end-of-string symbol is zero.*/
		   return j;                    /* return new alphabet size.*/
	}
	
	public void suffixsort(int x, int p, int n, int k, int l) {
		 int *pi, *pk;
		   int i, j, s, sl;

		   V=x;                         /* set global values.*/
		   I=p;

		   if (n>=k-l) {                /* if bucketing possible,*/
			  j=transform(V, I, n, k, l, n);
			  bucketsort(V, I, n, j);   /* bucketsort on first r positions.*/
		   } else {
			  transform(V, I, n, k, l, std::numeric_limits<int>::max());
			  for (i=0; i<=n; ++i)
				 I[i]=i;                /* initialize I with suffix numbers.*/
			  h=0;
			  sort_split(I, n+1);       /* quicksort on first r positions.*/
		   }
		   h=r;                         /* number of symbols aggregated by transform.*/

		   while (*I>=-n) {
			  pi=I;                     /* pi is first position of group.*/
			  sl=0;                     /* sl is negated length of sorted groups.*/
			  do {
				 if ((s=*pi) <= 0 && (s=*pi) != 0) {
					pi-=s;              /* skip over sorted group.*/
					sl+=s;              /* add negated length to sl.*/
				 } else {
					if (sl) {
					   *(pi+sl)=sl;     /* combine sorted groups before pi.*/
					   sl=0;
					}
					pk=I+V[s]+1;        /* pk-1 is last position of unsorted group.*/
					sort_split(pi, (int)(pk-pi));
					pi=pk;              /* next group.*/
				 }
			  } while (pi<=I+n);
			  if (sl)                   /* if the array ends with a sorted group.*/
				 *(pi+sl)=sl;           /* combine sorted groups at end of I.*/
			  h=2*h;                    /* double sorted-depth.*/
		   }

		   for (i=0; i<=n; ++i)         /* reconstruct suffix array from inverse.*/
			  I[V[i]]=i;
	}
}
